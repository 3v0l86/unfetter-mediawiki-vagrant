vcl 4.0;
import xkey;
import tbf;
import std;

sub vcl_init {
    tbf.open("/var/run/varnish", "mode=600;dbname=tbf.bdb;truncate");
}

sub vcl_fini {
    tbf.close();
}

sub vcl_recv {
    if (req.restarts == 0) {
        set req.backend_hint = swift;
    } else {
        set req.backend_hint = thumbor;
        # Restore original URL which has been rewritten for swift
        set req.url = req.http.X-Url;
        # This is to avoid overwriting the xkey served by Thumbor
        set req.http.X-Url = "";
    }

    set req.http.X-Forwarded-For = client.ip;

    # Since we expose varnish on the default port (6081) we need to rewrite
    # requests that are generated using the default wiki port (8080)
    # This needs to be done early because it's needed for PURGE calls
    if (req.url ~ ":8080") {
        set req.url = regsub(req.url, "(.*):8080/(.*)", "\1:6081/\2");
    }

    # This uses the ACL action called "purge". Basically if a request to
    # PURGE the cache comes from anywhere other than localhost, ignore it.
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return (synth(405, "This IP is not allowed to send PURGE requests."));
        }

        if (xkey.purge(regsub(req.url, "^/(.*)", "\1")) != 0) {
            return (synth(200, "Purged"));
        } else {
            return (synth(404, "Key not found"));
        }
    }

    # Reject any methods that aren't expected to work in the context of thumbnails
    if (req.method != "GET" && req.method != "HEAD") {
        return (synth(405, "Method not allowed"));
    }

    # Swift needs the URLs rewritten, it can't do that alone
    if (req.backend_hint == swift) {
        # Save original URL for thumbor's sake
        set req.http.X-Url = req.url;

        if (req.url ~ "^/images/thumb/") {
            set req.url = regsub(req.url, "^/images/thumb/(.*)", "/v1/AUTH_<%= scope['::swift::project'] %>/wiki-local-thumb/\1");
        } else {
            set req.url = regsub(req.url, "^/images/(.*)", "/v1/AUTH_<%= scope['::swift::project'] %>/wiki-local-public/\1");
        }
    }

    return(hash);
}

sub vcl_miss {
    # 10 tokens to consume, refilled at a rate of 5/s
    if (!tbf.rate("ip:" + client.ip, 1, 0.2s, 10)) {
        return (synth(429, "Request rate exceeded"));
    }
}

sub vcl_deliver {
    # Miss
    if (obj.hits == 0) {
        # If the request requires more than 1s of CPU time, make it count like n extra
        # tokens for the tbf throttling, where n is the amount of CPU seconds minus 1
        if (!tbf.rate("ip:" + client.ip, (std.integer(resp.http.Processing-Utime, 1000) - 1000) / 1000, 0.2s, 10)) {
            # tbf.rate() has to be inside an if statement
        }
    }

    # If the thumbnail is a miss in swift, request it from thumbor
    if (resp.status == 404 && req.backend_hint == swift) {
        return(restart);
    }

    # Let things go to the default-subs.vcl vcl_deliver
}

sub vcl_backend_response {
    set beresp.http.Access-Control-Allow-Origin = "*";

    # Swift can't set the xkey itself, we have to help
    if (bereq.http.X-Url ~ "^/images/thumb/") {
        set beresp.http.xkey = regsub(bereq.http.X-Url, "^/images/thumb/[^/]+/[^/]+/[^/]+/.*-([0-9a-zA-Z]+)[\.0-9a-zA-Z]+$", "\1");
    }
}