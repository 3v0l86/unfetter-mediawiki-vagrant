# vim:set sw=2 ts=2 sts=2 et
# Process syslog messages
filter {

  if [type] == "syslog" {
    mutate {
      replace => [ "type", "%{program}" ]
      add_field => { "level" => "%{severity_label}" }
      # "\n" newline notation in substitution results in "\\n" in output.
      # Using a string with a literal newline works as desired.
      gsub => [ "message", "#012", '
' ]
      add_tag => [ "syslog" ]
    }

    # Strip "message repeated" preamble
    if [message] =~ /^message repeated \d+ times:/ {
      grok {
        match => [
        "message",
        "^message repeated %{NUMBER:repeated} times: \[\s*%{GREEDYDATA:message}\]$"
        ]
        overwrite => [ "message" ]
        named_captures_only => true
      }
    }

    # Mark kernel messages forwarded because of hhvm as hhvm messages
    if [type] == "kernel" and [message] =~ /hhvm/ {
      mutate {
        replace => [ "type", "hhvm" ]
      }
    }

    # Strip leading newline from message
    if [type] == "hhvm" {
      mutate {
        strip => [ "message" ]
      }
    }

    if [type] == "hhvm-fatal" {
      # Join sequential lines into a single event
      multiline {
        pattern => "^Host: "
        negate => true
        what => "previous"
      }
    }

    if [type] == "apache2" {
      # Ignore known mod_proxy_fcgi bugs
      if [message] =~ /AH01070: Error parsing script headers/ {
        drop {}
      }
      if [message] =~ /AH01068: Got bogus version \d/ {
        drop {}
      }
      # Parse typical apache error format:
      # [channel:level] [pid N:tid N] MSG? [client HOST:PORT] MSG, referer: URL
      grok {
        match => [
            "message",
            "^\[(%{WORD:channel}?:)?%{LOGLEVEL:level}\]\s+(\[pid %{POSINT}(:tid %{POSINT:thread})?\]\s+)?(?<message_prefix>[^\[]+)?(\[client %{IP:clientip}(:%{POSINT:clientport})?\]\s+)?%{DATA:message}(,\s+referer:\s+%{NOTSPACE:referrer})?$"
        ]
        overwrite => [ "message", "level" ]
        named_captures_only => true
      }
      if [message_prefix] {
        mutate {
          "replace" => [ "message", "%{message_prefix}%{message}" ]
              "remove_field" => [ "message_prefix" ]
        }
      }
    } # end [type] == "apache2"

    if [type] == "mediawiki" {
      if [message] =~ /^{.*}$/ {
        # Remove syslog fields
        mutate {
          remove_field => [
              "facility",
              "facility_label",
              "logsource",
              "priority",
              "program",
              "severity",
              "severity_label",
              "timestamp"
          ]
        }
        # Parse message as json to unpack logstash record
        json {
          source => "message"
        }
      } # end [message] =~ /^{.*}$/

      if [channel] == "exception" {
        # Excluded because events are duplicated by exception-json
        drop {}
      }

      if [channel] == "exception-json" {
        # Parse message as json and put elements in event
        json {
          source => "message"
        }
        mutate {
          # Rename the `id` field to `exeception_id`
          rename => [ "id", "exception_id" ]
          # Add a `class` field with the exception class name
          # Add a field to compute a checksum value based on message+file+line
          add_field => [
            "class", "%{type}",
            "message_checksum", "%{message}|%{file}|%{line}"
          ]
          # Rename the type back to "mediawiki"
          # Rename the channel to "exception"
          replace => [
            "type", "mediawiki",
            "channel", "exception"
          ]
          add_tag => [ "exception-json" ]
        }
        # Convert message_checksum field to md5 hash
        anonymize {
          fields => [ "message_checksum" ]
          algorithm => "MD5"
          key => "boringsalt"
        }
      } # end [channel] == "exception-json"

      if [channel] == "error-json" {
        # Parse message as json and put elements in event
        json {
          source => "message"
        }
        mutate {
          # Rename the `id` field to `error_id`
          rename => [ "id", "error_id" ]
          # Add a `class` field with the exception class name
          # Add a field to compute a checksum value based on message+file+line
          add_field => [
            "class", "%{type}",
            "message_checksum", "%{message}|%{file}|%{line}"
          ]
          # Rename the type back to "mediawiki"
          replace => [
            "type", "mediawiki"
          ]
        }
      } # end [channel] == "error-json"

    } # end [type] == "mediawiki"

  } # end [type] == "syslog"

}
