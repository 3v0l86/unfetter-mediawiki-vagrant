# -*- coding: utf-8 -*-
# Managed by Puppet.
# See puppet/modules/role/templates/striker/vagrant_config.py.erb

import django_auth_ldap.config
import ldap
from striker.settings import *  # noqa

# Not so secret secret key
SECRET_KEY = '&tse*xh73ad^#d+v%%rb18wp2ab%sj5xv1t7&zyj%bma=^h@g_'

# OAuth with local devwiki
OAUTH_MWURL = "<%= scope['::mediawiki::server_url'] %>/w/index.php"
OAUTH_CONSUMER_KEY = "<%= @oauth_consumer_key %>"
OAUTH_CONSUMER_SECRET = "<%= @oauth_consumer_secret %>"

# Credentials for local Phabricator
PHABRICATOR_URL = "<%= @phabricator_url %>"
PHABRICATOR_USER = "<%= @phabricator_user %>"
PHABRICATOR_TOKEN = "<%= @phabricator_token %>"
PHABRICATOR_REPO_ADMIN_GROUP = "<%= @phabricator_repo_admin_group %>"

# MySQL database for app storage
DATABASES['default'] = {
    'ENGINE': 'django.db.backends.mysql',
    'NAME': '<%= @db_name %>',
    'USER': '<%= @db_user %>',
    'PASSWORD': '<%= @db_pass %>',
    'HOST': '127.0.0.1',
    'PORT': '3306',
}

# LDAP config
DATABASES['ldap'] = {
    'ENGINE': 'ldapdb.backends.ldap',
    'NAME': 'ldap://127.0.0.1:389',
    'USER': '<%= scope['::role::ldapauth::writer_dn'] %>',
    'PASSWORD': '<%= scope['::role::ldapauth::writer_password'] %>',
}

AUTH_LDAP_SERVER_URI = DATABASES['ldap']['NAME']
AUTH_LDAP_START_TLS = False
AUTH_LDAP_USER_DN_TEMPLATE = 'cn=%(user)s,<%= scope['::role::ldapauth::user_base_dn'] %>'
AUTH_LDAP_USER_SEARCH = None
AUTH_LDAP_GROUP_SEARCH = django_auth_ldap.config.LDAPSearch(
    '<%= scope['::role::ldapauth::base_dn'] %>',
    ldap.SCOPE_SUBTREE,
    '(objectClass=groupOfNames)'
)
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    'is_staff': 'cn=wmf,ou=groups,<%= scope['::role::ldapauth::base_dn'] %>',
    'is_superuser': 'cn=tools.admin,ou=servicegroups,<%= scope['::role::ldapauth::base_dn'] %>',
}

TOOLS_MAINTAINER_BASE_DN = 'ou=people,<%= scope['::role::ldapauth::base_dn'] %>'
TOOLS_TOOL_BASE_DN = 'ou=servicegroups,<%= scope['::role::ldapauth::base_dn'] %>'

# Logging
LOGGING['handlers']['vagrant'] = {
    'class': 'logging.FileHandler',
    'filename': '<%= @log_dir %>/striker/django.log',
    'formatter': 'line',
    'level': 'DEBUG',
}
LOGGING['root']['handlers'] = ['vagrant']
if 'loggers' in LOGGING:
    for logger in LOGGING['loggers']:
        LOGGING['loggers'][logger]['handlers'] = ['vagrant']

# ldap.set_option(ldap.OPT_DEBUG_LEVEL, 4095)
