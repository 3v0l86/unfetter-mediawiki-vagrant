#!/usr/bin/env bash
# Update local git repositories
# Command run in VM by `vagrant git-update`

. /etc/profile.d/set_MW_INSTALL_PATH.sh

set -u
declare -a UPDATE_ERRORS

UPDATE_ERRORS=( )

function pull {
  echo -e "\e[36m==> Updating $(pwd) ...\e[0m"
  branch=$(expr $(git symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  err=''
  if [[ -n "$branch" ]]; then
    remote=$(git config branch.${branch}.remote)
    if [[ -n "$remote" ]]; then
        url=$(git config --get remote.${remote}.url)
        if [[ $url == ssh://* ]]; then
            # Convert remote git url from ssh:// to anonymous https://
            tempurl=$(echo $url | sed -e 's!ssh://[^@]\+@!https://!g' -e 's!:29418!/r!g')
            git pull $tempurl
        else
            git pull
        fi
        if [[ $? -ne 0 ]]; then
          # If we didn't successfully update (possibly because we're on
          # a local branch), leave the submodules alone.
          err="GIT PULL failed in $(pwd) for branch '$branch'"
        else
          git submodule update --init --recursive
          if [[ $? -ne 0 ]]; then
            err="GIT SUBMODULE UPDATE failed in $(pwd) for branch '$branch'"
          fi
        fi

    else
        err="Remote not found in $(pwd) for branch '$branch'"
    fi
  else
    err="Unable to get current branch in $(pwd)"
  fi

  if [[ -n "$err" ]]; then
    echo -e "\e[1;31m ***** $err\e[0m"
    UPDATE_ERRORS+=("$err")
  fi
  echo
}

cd "$MW_INSTALL_PATH"
pull

for f in extensions/*; do
  if [[ -d $f ]]; then
    pushd $f > /dev/null
    pull
    popd > /dev/null
  fi
done

echo -e "\e[36m==> Updating composer dependencies ...\e[0m"
composer update --no-interaction --optimize-autoloader
echo

echo -e "\e[36m==> Updating database ...\e[0m"
foreachwiki update.php --quick --doshared

if [[ ${#UPDATE_ERRORS[@]} -ne 0 ]]; then
  echo
  echo -e "\e[1;31m ************* Errors ***********\e[0m"
  printf -- '* %s\n' "${UPDATE_ERRORS[@]}"
fi
