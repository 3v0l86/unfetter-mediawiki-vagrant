#!/usr/bin/env bash
# Update local git repositories
# Command run in VM by `vagrant git-update`

. /etc/profile.d/set_MW_INSTALL_PATH.sh

set -u
declare -a UPDATE_ERRORS

UPDATE_ERRORS=( )

function pull {
  git_cmd=git
  # /srv dirs are all root, so use sudo in that case
  [[ -O . ]] || git_cmd="sudo git"
  echo -e "\e[36m==> Updating $(pwd) ...\e[0m"
  branch=$(expr $($git_cmd symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  if [[ -z "$branch" ]]; then
    $git_cmd checkout master
    branch=$(expr $($git_cmd symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  fi
  err=''
  if [[ -n "$branch" ]]; then
    remote=$($git_cmd config branch.${branch}.remote)
    if [[ -n "$remote" ]]; then
        url=$($git_cmd config --get remote.${remote}.url)
        if [[ $url == ssh://* ]]; then
            # Convert remote git url from ssh:// to anonymous https://
            tempurl=$(echo $url | sed -e 's!ssh://[^@]\+@!https://!g' -e 's!:29418!/r!g')
            $git_cmd pull --rebase $tempurl
        else
            $git_cmd pull --rebase
        fi
        if [[ $? -ne 0 ]]; then
          # If we didn't successfully update (possibly because we're on
          # a local branch), leave the submodules alone.
          err="GIT PULL failed in $(pwd) for branch '$branch'"
        else
          $git_cmd submodule update --init --recursive
          if [[ $? -ne 0 ]]; then
            err="GIT SUBMODULE UPDATE failed in $(pwd) for branch '$branch'"
          fi
        fi

    else
        err="Remote not found in $(pwd) for branch '$branch'"
    fi
  else
    err="Unable to get current branch in $(pwd)"
  fi

  if [[ -n "$err" ]]; then
    echo -e "\e[1;31m ***** $err\e[0m"
    UPDATE_ERRORS+=("$err")
  fi
  echo
}

for srvdir in $(find <%= scope['::mwv::services_dir'] %> -maxdepth 2 -type d -name .git -printf "%h\n"); do
  cd "${srvdir}"
  pull
  if ! git ls-files node_modules --error-unmatch > /dev/null 2>&1 && [[ -f package.json ]]; then
    npm update
  fi
done

cd "$MW_INSTALL_PATH"
pull

for f in extensions/*; do
  if [[ -d $f ]] && [[ -d $f/.git ]]; then
    pushd $f > /dev/null
    pull
    popd > /dev/null
  fi
done

for f in skins/*; do
  if [[ -d $f ]] && [[ -d $f/.git ]]; then
    pushd $f > /dev/null
    pull
    popd > /dev/null
  fi
done

for f in . extensions/*; do
  if [[ -d $f ]] && [[ -f $f/composer.json ]]; then
    pushd $f > /dev/null
    echo -e "\e[36m==> Updating composer dependencies in $(pwd) ...\e[0m"
    composer update --no-interaction --optimize-autoloader
    popd > /dev/null
    echo
  fi
done

echo -e "\e[36m==> Updating database ...\e[0m"
foreachwiki update.php --quick --doshared

if [[ ${#UPDATE_ERRORS[@]} -ne 0 ]]; then
  echo
  echo -e "\e[1;31m ************* Errors ***********\e[0m"
  printf -- '* %s\n' "${UPDATE_ERRORS[@]}"
fi
