#!/usr/bin/env bash
# Update local git repositories
# Command run in VM by `vagrant git-update`

. /etc/profile.d/set_MW_INSTALL_PATH.sh

set -u
declare -a UPDATE_ERRORS

# Set default values for configuration variables
: ${SHARE_OWNER=<%= scope['::share_owner'] %>}
: ${SHARE_GROUP=<%= scope['::share_group'] %>}
: ${NPM_CONFIG_CACHE=<%= scope['::npm::cache_dir'] %>}
: ${SERVICE_CONF_DIR=<%= scope['::service::conf_dir'] %>}

UPDATE_ERRORS=( )

function pull {
  local PRINT_EMPTY_LINE=''
  if [[ $# -eq 0 ]]; then
    echo -e "\e[36m==> Updating $(pwd) ...\e[0m"
    PRINT_EMPTY_LINE='yes'
  else
    echo "[*] Updating repo in $(pwd) ..."
  fi

  # Some srv dirs may be still under root, chown them
  find . -uid 0 -exec sudo chown -R ${SHARE_OWNER}:${SHARE_GROUP} {} \+

  local BRANCH=$(expr $(git symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  if [[ -z $BRANCH ]]; then
    git checkout master
    BRANCH=$(expr $(git symbolic-ref HEAD) : 'refs/heads/\(.*\)')
  fi

  local ERR=''
  if [[ -n $BRANCH ]]; then
    local REMOTE=$(git config branch.${BRANCH}.remote)
    if [[ -n $REMOTE ]]; then
      local URL=$(git config --get remote.${REMOTE}.url)
      if [[ $URL == ssh://* ]]; then
        # Convert remote git url from ssh:// to anonymous https://
        local TEMPURL=$(echo $URL | sed -e 's!ssh://[^@]\+@!https://!g' -e 's!:29418!/r!g')
        git pull --rebase $TEMPURL
      else
        git pull --rebase
      fi

      if [[ $? -ne 0 ]]; then
        # If we didn't successfully update (possibly because we're on
        # a local branch), leave the submodules alone.
        ERR="GIT PULL failed in $(pwd) for branch '${BRANCH}'"
      else
        git submodule update --init --recursive
        if [[ $? -ne 0 ]]; then
          ERR="GIT SUBMODULE UPDATE failed in $(pwd) for branch '${BRANCH}'"
        fi
      fi
    else
      ERR="Remote not found in $(pwd) for branch '${BRANCH}'"
    fi
  else
    ERR="Unable to get current branch in $(pwd)"
  fi

  if [[ -n $ERR ]]; then
    echo -e "\e[1;31m ***** ${ERR}\e[0m"
    UPDATE_ERRORS+=("$ERR")
  fi

  [[ -n $PRINT_EMPTY_LINE ]] && echo
}

# Expose the needed npm env vars
export NPM_CONFIG_CACHE
export NPM_CONFIG_GLOBAL=false
export LINK=g++
export HOME=/home/vagrant

# Clear the npm module cache as earlier cached versions
# of larger modules cause npm to run out of memory
sudo rm -rf ${NPM_CONFIG_CACHE}/* /home/vagrant/.npm

for SRVCONF in ${SERVICE_CONF_DIR}/*.conf; do
  ERR=''
  source $SRVCONF
  echo -e "\e[36m==> Updating ${SERVICE_NAME} ...\e[0m"
  if [[ -n $NEED_CHDIR && -d $SERVICE_DIR ]]; then
    cd $SERVICE_DIR
    [[ -n $DO_PULL ]] && pull no_title
    if [[ -n $UPDATE_CMD ]]; then
      echo "[*] Updating dependencies for ${SERVICE_NAME} ..."
      if ! /bin/sh -c "$UPDATE_CMD"; then
        ERR="Could not update dependencies of ${SERVICE_NAME} !"
        echo -e "\e[1;31m ***** ${ERR}\e[0m"
        UPDATE_ERRORS+=("${ERR}")
      fi
    fi
  fi
  if [[ -n $DO_RESTART && -z $ERR ]]; then
    echo "[*] Restarting service ${RESTART_NAME} ..."
    sudo service ${RESTART_NAME} restart
  fi
  echo
done

cd $MW_INSTALL_PATH
pull

for DIR in ${MW_INSTALL_PATH}/extensions/*; do
  if [[ -d $DIR ]] && [[ -d ${DIR}/.git ]]; then
    pushd $DIR > /dev/null
    pull
    popd > /dev/null
  fi
done

for DIR in ${MW_INSTALL_PATH}/skins/*; do
  if [[ -d $DIR ]] && [[ -d ${DIR}/.git ]]; then
    pushd $DIR > /dev/null
    pull
    popd > /dev/null
  fi
done

for DIR in . ${MW_INSTALL_PATH}/extensions/*; do
  if [[ -d $DIR ]] && [[ -f ${DIR}/composer.json ]]; then
    pushd $DIR > /dev/null
    if git ls-files --error-unmatch composer.lock >/dev/null 2>&1; then
      # composer.lock is git-versioned, so rely on it
      COMPOSER_CMD=install
      COMPOSER_ACTION=Installing
    else
      COMPOSER_CMD=update
      COMPOSER_ACTION=Updating
    fi

    echo -e "\e[36m==> $COMPOSER_ACTION composer dependencies in $(pwd) ...\e[0m"
    /usr/local/bin/composer $COMPOSER_CMD --no-interaction --optimize-autoloader
    popd > /dev/null
    echo
  fi
done

echo -e "\e[36m==> Updating database ...\e[0m"
/usr/local/bin/foreachwiki update.php --quick --doshared

if [[ ${#UPDATE_ERRORS[@]} -ne 0 ]]; then
  echo
  echo -e "\e[1;31m ************* Errors ***********\e[0m"
  printf -- '* %s\n' "${UPDATE_ERRORS[@]}"
fi
